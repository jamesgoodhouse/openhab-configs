rule "Mood Lights — Turn On at Sunset"
when
  Channel "astro:sun:home_set_with_offset:set#event" triggered START
then
  if (Present.state == ON) {
    logInfo("lights", "Mood Lights — Turning on at Sunset")

    val dimLevelLanding = (LandingLightbulb_AutomationDimmerValue.state as Number).intValue
    LandingLightbulb_Dimmer.sendCommand(dimLevelLanding)

    val dimLevelLivingRoom = (LivingRoomLightbulb_AutomationDimmerValue.state as Number).intValue
    LivingRoomLightbulb_Dimmer.sendCommand(dimLevelLivingRoom)

    val dimLevelUpstairsLanding = (LandingUpstairsLightbulb_AutomationDimmerValue.state as Number).intValue
    LandingUpstairsLightbulb_Dimmer.sendCommand(dimLevelUpstairsLanding)
  }
end

rule "Mood Lights — Turn Off at Midnight"
when
  Time is midnight
then
  logInfo("lights", "Mood Lights — Turning Off")

  LandingLightbulb_Dimmer.sendCommand(0)
  LivingRoomLightbulb_Dimmer.sendCommand(0)
  LandingUpstairsLightbulb_Dimmer.sendCommand(0)
end

rule "Mood Lights — Turn On When Home"
when
  Item Present changed to ON
then
  val sunsetTimeWithOffset = SunsetTimeWithOffset.getStateAs(DateTimeType).zonedDateTime

  if (now.isEqual(sunsetTimeWithOffset) || (now.isAfter(sunsetTimeWithOffset))) {
    logInfo("lights", "Mood Lights — Turning Back On")

    val dimLevelLanding = (LandingLightbulb_AutomationDimmerValue.state as Number).intValue
    LandingLightbulb_Dimmer.sendCommand(dimLevelLanding)

    val dimLevelLivingRoom = (LivingRoomLightbulb_AutomationDimmerValue.state as Number).intValue
    LivingRoomLightbulb_Dimmer.sendCommand(dimLevelLivingRoom)

    val dimLevelUpstairsLanding = (LandingUpstairsLightbulb_AutomationDimmerValue.state as Number).intValue
    LandingUpstairsLightbulb_Dimmer.sendCommand(dimLevelUpstairsLanding)
  }
end
