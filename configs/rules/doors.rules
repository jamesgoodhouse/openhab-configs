import java.util.Map

var Timer GarageLightsTimer

rule "External Door Opened"
when
  Member of ExternalDoorStates changed from CLOSED to OPEN
then
  // External Door Opened While Away
  if (Present.state == OFF) {
    createTimer(now.plusSeconds(60), [ |
      if (Present.state == OFF) {
        if (Rule_NotifyWhenExternalDoorOpenedWhileAway.state == ON) {
          val Map<String, String> nameMap = newHashMap

          nameMap.put("DeckDoor_State", "Deck Door")
          nameMap.put("FrontDoor_State", "Front Door")
          nameMap.put("GaragePersonDoor_State", "Garage Person Door")
          nameMap.put("GarageRollupDoor_State", "Garage Rollup Door")

          val name = nameMap.getOrDefault(triggeringItem.name, "Unknown")

          logInfo("notification", "Sending Telegram notification")
          val telegramAction = getActions("telegram", "telegram:telegramBot:boty_mcbotface")
          telegramAction.sendTelegram("⚠️ The " + name + " has been opened")
        }
      }
    ])
  }

  if (triggeringItem.name == "GarageRollupDoor_State") {
    if (GarageOverheadLights_Switch.state == OFF && ExternalDoorOpenedSinceHome.state == OFF && Rule_TurnOnGarageLightWhenAwayAndGarageDoorOpens.state == ON) {
      GarageOverheadLights_Switch.sendCommand(ON)
    }

    // turn off after set time if not home yet
    GarageLightsTimer = createTimer(now.plusSeconds(300), [ |
      if (GarageOverheadLights_Switch.state == ON && ExternalDoorOpenedSinceHome.state == OFF) {
        GarageOverheadLights_Switch.sendCommand(OFF)
      }
    ])
  }

  // set ExternalDoorOpenedSinceHome to true if home when an external door has been opened
  if (Present.state == ON && ExternalDoorOpenedSinceHome.state == OFF) ExternalDoorOpenedSinceHome.postUpdate(ON)
end


rule "Garage Lights — Cancel Auto Off Timer"
when
  Item GarageOverheadLights_Switch changed from ON to OFF
then
  if (GarageLightsTimer !== null) GarageLightsTimer.cancel()
end
