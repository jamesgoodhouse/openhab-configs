Group:Contact:AND(CLOSED,OPEN) DoorStates
Group:Contact:AND(CLOSED,OPEN) ExternalDoorStates (DoorStates)
Switch ExternalDoorOpenedSinceHome

{{ $garageDoorSensorTypeID := (ds "configs").things.zwave.devices.sensor_garage_door.type_id -}}
{{- $garageDoorSensorThingID := (ds "configs").things.zwave.devices.sensor_garage_door.thing_id -}}
{{- $garageDoorSensorChannelPrefix := printf "zwave:%s:controller:%s" $garageDoorSensorTypeID $garageDoorSensorThingID -}}
// garage door contact sensor
// Number:Dimensionless GarageRollupDoorContactSensor_Battery "Battery [%d %%]" <battery> (GarageRollupDoorContactSensor,Persist) ["Battery"] {
//   channel = "{{ $garageDoorSensorChannelPrefix }}:battery-level"
// }
// Contact GarageRollupDoorContactSensor_State "State" (GarageRollupDoorContactSensor,GarageRollupDoor_State,Persist) ["OpenState"] {
//   channel = "{{ $garageDoorSensorChannelPrefix }}:sensor_door"
// }
// Switch GarageRollupDoorContactSensor_TamperAlarm "Tamper Alarm" <alarm> (GarageRollupDoorContactSensor,Persist) ["Tampered"] {
//   channel = "{{ $garageDoorSensorChannelPrefix }}:alarm_tamper"
// }

{{ $garageDoorTiltSensorTypeID := (ds "configs").things.zwave.devices.tilt_sensor_garage_door.type_id -}}
{{- $garageDoorTiltSensorThingID := (ds "configs").things.zwave.devices.tilt_sensor_garage_door.thing_id -}}
{{- $garageDoorTiltSensorChannelPrefix := printf "zwave:%s:controller:%s" $garageDoorTiltSensorTypeID $garageDoorTiltSensorThingID -}}
// garage door tilt sensor
Number:Dimensionless GarageRollupDoorTiltSensor_Battery "Battery [%d %%]" <battery> (GarageRollupDoorTiltSensor,Persist) ["Battery"] {
  channel = "{{ $garageDoorTiltSensorChannelPrefix }}:battery-level"
}
Contact GarageRollupDoorTiltSensor_State "State" (GarageRollupDoorTiltSensor,GarageRollupDoor_State,Persist) ["OpenState"] {
  channel = "{{ $garageDoorTiltSensorChannelPrefix }}:sensor_door"
}
Switch GarageRollupDoorTiltSensor_TamperAlarm "Tamper Alarm" <alarm> (GarageRollupDoorTiltSensor,Persist) ["Tampered"] {
  channel = "{{ $garageDoorTiltSensorChannelPrefix }}:alarm_tamper"
}

Group:Contact:AND(CLOSED,OPEN) GarageRollupDoor_State "State" (GarageRollupDoor,Persist,ExternalDoorStates) ["OpenState"]
DateTime GarageRollupDoor_LastClosedAt (GarageRollupDoor,Persist) ["Timestamp"]
DateTime GarageRollupDoor_LastOpenAt (GarageRollupDoor,Persist) ["Timestamp"]
Switch GarageRollupDoor_Switch "Relay" (GarageRollupDoor,Persist) ["Control"] { channel="shelly:shellyplus1:garage_door:relay#output" }

// front door
Contact FrontDoor_State "State" (FrontDoor,ExternalDoorStates) ["OpenState"] {
  channel="mqtt:topic:mosquitto:sensor_door_front:state"
}
DateTime FrontDoor_LastClosedAt (FrontDoor,Persist) ["Timestamp"]
DateTime FrontDoor_LastOpenAt (FrontDoor,Persist) ["Timestamp"]

// garage entry door
Contact GaragePersonDoor_State "State" (GaragePersonDoor,ExternalDoorStates) ["OpenState"] {
  channel="mqtt:topic:mosquitto:sensor_door_garage_entry:state"
}
DateTime GaragePersonDoor_LastClosedAt (GaragePersonDoor,Persist) ["Timestamp"]
DateTime GaragePersonDoor_LastOpenAt (GaragePersonDoor,Persist) ["Timestamp"]

// deck door
Contact DeckDoor_State "State" (DeckDoor,ExternalDoorStates) ["OpenState"] {
  channel="mqtt:topic:mosquitto:sensor_door_deck:state"
}
DateTime DeckDoor_LastClosedAt (DeckDoor,Persist) ["Timestamp"]
DateTime DeckDoor_LastOpenAt (DeckDoor,Persist) ["Timestamp"]
